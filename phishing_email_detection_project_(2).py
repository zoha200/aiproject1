# -*- coding: utf-8 -*-
"""Phishing_Email_Detection_Project (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16aP5udYxcSrY5mnwSwEkZbR5Zh3iTl5v

# Phishing Email Detection using Multinomial Naive Bayes and SVM

This notebook demonstrates how to build a phishing email detector using two machine learning models: Multinomial Naive Bayes and Support Vector Machine (SVM). The dataset used here is a CSV file containing email text labeled as phishing or not.

Project By: Waniaa Masood (F2023-533) , Rameen Safdar (F2023-383), Zoha Humayun (F2023-035)

This covers:

- Data loading & inspection
- Preprocessing
- Feature extraction with CountVectorizer
- Model training with MultinomialNB and SVM
- Evaluation and comparison
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, confusion_matrix, classification_report

df = pd.read_csv('/content/Phishing_Email.csv', on_bad_lines='skip')



df.head()

df.isnull().sum()

print("Columns:", df.columns)
print("Unique labels:", df['Email Type'].unique())

df.rename(columns={'Email Text': 'text', 'Email Type': 'label'}, inplace=True)

sns.countplot(x='label', data=df)
plt.title("Distribution of Labels (0 = Not Phishing, 1 = Phishing)")
plt.show()

df['label'] = df['label'].map({'Phishing Email': 1, 'Safe Email': 0})


df = df.dropna(subset=['label'])


df['label'] = df['label'].astype(int)


X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)


X_train = X_train.fillna("")
X_test = X_test.fillna("")

vectorizer = CountVectorizer()
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

nb_model = MultinomialNB()
nb_model.fit(X_train_vec, y_train)
nb_preds = nb_model.predict(X_test_vec)

nb_accuracy = accuracy_score(y_test, nb_preds)
nb_precision = precision_score(y_test, nb_preds)

print("Multinomial Naive Bayes Results:")
print("Accuracy:", nb_accuracy)
print("Precision:", nb_precision)
print("\nClassification Report:\n", classification_report(y_test, nb_preds))

svm_model = SVC()
svm_model.fit(X_train_vec, y_train)
svm_preds = svm_model.predict(X_test_vec)

svm_accuracy = accuracy_score(y_test, svm_preds)
svm_precision = precision_score(y_test, svm_preds)

print("Support Vector Machine Results:")
print("Accuracy:", svm_accuracy)
print("Precision:", svm_precision)
print("\nClassification Report:\n", classification_report(y_test, svm_preds))

metrics_df = pd.DataFrame({
    'Model': ['Multinomial NB', 'SVM'],
    'Accuracy': [nb_accuracy, svm_accuracy],
    'Precision': [nb_precision, svm_precision]
})

metrics_df.set_index('Model').plot(kind='bar', figsize=(8, 6), ylim=(0, 1), colormap='viridis')
plt.title("Model Comparison: Accuracy and Precision")
plt.ylabel("Score")
plt.show()

if (svm_accuracy > nb_accuracy) and (svm_precision > nb_precision):
    print("SVM is the better model for phishing email detection based on accuracy and precision.")
else:
    print("Multinomial Naive Bayes is the better model for phishing email detection based on accuracy and precision.")

def predict_email(email_text):

    email_vec = vectorizer.transform([email_text])


    nb_prediction = nb_model.predict(email_vec)[0]
    svm_prediction = svm_model.predict(email_vec)[0]


    print("\n--- Prediction on New Email Input ---")
    print("Email Content:", email_text)
    print("Multinomial Naive Bayes Prediction:", "Phishing" if nb_prediction == 1 else "Not Phishing")
    print("Support Vector Machine Prediction:", "Phishing" if svm_prediction == 1 else "Not Phishing")


# Replace the below string with any email text you'd like to test:
sample_email = "Hi Waniaa,Just a reminder that our weekly team meeting is scheduled for Thursday at 10 AM in the main conference room. Let me know if you'll be attending remotely.Regards,Sarah Ahmed ,HR Coordinator, SoftTech Solutions"
predict_email(sample_email)

sample_email = "Congratulations! You've won a $1000 gift card. Click here to claim now!"
predict_email(sample_email)

